# Choix de l'image Docker pour l'exécution du pipeline
image: python:3.10.6

before_script:
  - pip install --upgrade pip
  - apt-get update
  - apt-get install -y libgl1-mesa-glx
  - apt-get install -y zip
  - pip install -r requirements.txt
  
# Les étapes du pipeline
stages:
  - test
  - build
  - deploy
  - cleanup

# Etape de test
test-job:
  stage: test
  script:
    - python -m unittest discover -s tests

# Etape de build
build-job:
  stage: build
  script:
    - echo "Construction du projet"
    - python -m py_compile main.py
    - python -m py_compile src/modules/*.py
    - zip -r plong-${CI_COMMIT_TAG}.zip *
    - chmod 777 plong-${CI_COMMIT_TAG}.zip
  artifacts:
    paths:
      - plong-${CI_COMMIT_TAG}.zip
    expire_in: 1 day

# Etape de déploiement
deploy-job:
  stage: deploy
  dependencies: 
    - build-job
  script:
    - echo "Déploiement de l'application"
    - |
      curl --request POST "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/releases"\
            --header "Content-Type: application/json" \
            --header "PRIVATE-TOKEN: ${PLONG_token}" \
            --data "{
              \"tag_name\": \"${CI_COMMIT_TAG}\",
              \"name\": \"${CI_COMMIT_TAG}\",
              \"ref\": \"${CI_COMMIT_TAG}\",
              \"description\": \"## release: ${CI_COMMIT_TAG}\",
              \"assets\": {}
              }"
  only:
    - tags # Ne déployer que sur les tags

cleanup-job:
  stage: cleanup
  dependencies:
    - deploy-job
  script:
    - echo "Nettoyage"
    - rm -rf plong-${CI_COMMIT_TAG}.zip
  only:
    - tags
